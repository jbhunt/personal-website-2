/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jsfcAvrT2gX1xBNiQzA5u6
// Component: B4eyTs7tQqIU
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import MenuStack from "../../MenuStack"; // plasmic-import: vfLBrX0fe4mB/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: jsfcAvrT2gX1xBNiQzA5u6/projectcss
import sty from "./PlasmicDatasets.module.css"; // plasmic-import: B4eyTs7tQqIU/css

createPlasmicElementProxy;

export const PlasmicDatasets__VariantProps = new Array();

export const PlasmicDatasets__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDatasets__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__q5XK)}>
            <MenuStack
              data-plasmic-name={"menuStack"}
              data-plasmic-override={overrides.menuStack}
              className={classNames("__wab_instance", sty.menuStack)}
            />
          </section>
          <section className={classNames(projectcss.all, sty.section__nOPyy)}>
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__szWJj
              )}
            >
              {"Datasets"}
            </h1>
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            />

            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__yXiA7
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <PlasmicLink__
                    data-plasmic-name={"link"}
                    data-plasmic-override={overrides.link}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {
                      "Extracellular recordings from mouse superior colliculus during the optokinetic reflex "
                    }
                  </PlasmicLink__>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </h1>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {
                'This dataset contains extracellular recordings using Neuropixels 1.0 probes of neurons from the superior colliculus of mice viewing a drifting grating stimulus. The drifting grating stimulus included a "probe" phase every 0.5 to 1 s in which the contrast of the grating was briefly (50 ms) increased from 40% to 100%. The electrode was inserted at an extreme angle tangential to the medial-lateral axis of the brain so that most of the contacts were positioned in the zonal layer, the superficial gray layer, the optic layer, or the intermediate gray layer of the superior colliculus. The goal of this experiment was to understand how resetting saccades produced via the optokinetic reflex modulate visual responses in the superior colliculus.'
              }
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "menuStack", "freeBox", "link", "text"],
  menuStack: ["menuStack"],
  freeBox: ["freeBox"],
  link: ["link"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDatasets__ArgProps,
          internalVariantPropNames: PlasmicDatasets__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDatasets__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDatasets";
  } else {
    func.displayName = `PlasmicDatasets.${nodeName}`;
  }
  return func;
}

export const PlasmicDatasets = Object.assign(
  // Top-level PlasmicDatasets renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuStack: makeNodeComponent("menuStack"),
    freeBox: makeNodeComponent("freeBox"),
    link: makeNodeComponent("link"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicDatasets
    internalVariantProps: PlasmicDatasets__VariantProps,
    internalArgProps: PlasmicDatasets__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDatasets;
/* prettier-ignore-end */
