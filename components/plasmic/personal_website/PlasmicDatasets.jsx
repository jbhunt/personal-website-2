/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jsfcAvrT2gX1xBNiQzA5u6
// Component: B4eyTs7tQqIU
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import MenuStack from "../../MenuStack"; // plasmic-import: vfLBrX0fe4mB/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jsfcAvrT2gX1xBNiQzA5u6/projectcss
import sty from "./PlasmicDatasets.module.css"; // plasmic-import: B4eyTs7tQqIU/css

createPlasmicElementProxy;

export const PlasmicDatasets__VariantProps = new Array();

export const PlasmicDatasets__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDatasets__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__q5XK)}>
            <MenuStack
              data-plasmic-name={"menuStack"}
              data-plasmic-override={overrides.menuStack}
              className={classNames("__wab_instance", sty.menuStack)}
            />
          </section>
          <section className={classNames(projectcss.all, sty.section__nOPyy)}>
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Datasets"}
            </h1>
          </section>
          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link
            )}
            component={Link}
            href={
              "https://datadryad.org/dataset/doi:10.5061/dryad.cnp5hqcfn#readme"
            }
            platform={"nextjs"}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "var(--token-8bvv-gBG7EgC)", fontWeight: 700 }}
              >
                {"Hunt, J.B."}
              </span>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "var(--token-8bvv-gBG7EgC)" }}
              >
                {
                  ", Buteau, A., Hanson, S., Poleg-Polsky, A., Felsen, G. (2025). "
                }
              </span>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "var(--token-3BYo9Vr4LmDZ)" }}
              >
                {
                  "Extracellular recordings from mouse superior colliculus during the optokinetic reflex [Dataset]."
                }
              </span>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "var(--token-8bvv-gBG7EgC)" }}
              >
                {" "}
              </span>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{
                  color: "var(--token-8bvv-gBG7EgC)",
                  fontStyle: "italic"
                }}
              >
                {"Dryad"}
              </span>
              <React.Fragment>{""}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "var(--token-8bvv-gBG7EgC)" }}
              >
                {". https://doi.org/10.5061/dryad.cnp5hqcfn"}
              </span>
            </React.Fragment>
          </PlasmicLink__>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "menuStack", "h1", "link"],
  menuStack: ["menuStack"],
  h1: ["h1"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDatasets__ArgProps,
          internalVariantPropNames: PlasmicDatasets__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDatasets__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDatasets";
  } else {
    func.displayName = `PlasmicDatasets.${nodeName}`;
  }
  return func;
}

export const PlasmicDatasets = Object.assign(
  // Top-level PlasmicDatasets renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuStack: makeNodeComponent("menuStack"),
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicDatasets
    internalVariantProps: PlasmicDatasets__VariantProps,
    internalArgProps: PlasmicDatasets__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDatasets;
/* prettier-ignore-end */
