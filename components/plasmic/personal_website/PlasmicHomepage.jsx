/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jsfcAvrT2gX1xBNiQzA5u6
// Component: C6K2rGWyZuIT
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import MenuStack from "../../MenuStack"; // plasmic-import: vfLBrX0fe4mB/component
import { useScreenVariants as useScreenVariantsuMynEYiJj9Bh } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: UMynEYiJJ9bh/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: jsfcAvrT2gX1xBNiQzA5u6/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: C6K2rGWyZuIT/css
import ExternalLinkSvgrepoComSvgIcon from "./icons/PlasmicIcon__ExternalLinkSvgrepoComSvg"; // plasmic-import: VwU3O0G3-lKQ/icon

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsuMynEYiJj9Bh()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__rqf7W)}>
            <MenuStack
              data-plasmic-name={"menuStack"}
              data-plasmic-override={overrides.menuStack}
              className={classNames("__wab_instance", sty.menuStack)}
            />
          </section>
          <section className={classNames(projectcss.all, sty.section__qIuaL)}>
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1___1DWzf
              )}
            >
              {"Josh Hunt, Ph.D."}
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__knHLu
              )}
            >
              {
                "Hi, my name is Josh. I'm a neural data scientist and scientific software engineer interested in neurotechnology and developing tools for science."
              }
            </div>
          </section>
          <section className={classNames(projectcss.all, sty.section___6Elm)}>
            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__lk2W7
              )}
            >
              {"Projects"}
            </h1>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__wlDbb)}
            >
              <div className={classNames(projectcss.all, sty.column___3Jmxc)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__vqXri)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"200px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/personal_website/images/saccaeExtractionProjectThumbnailPng.png",
                    fullWidth: 886,
                    fullHeight: 886,
                    aspectRatio: undefined
                  }}
                />

                <div className={classNames(projectcss.all, sty.freeBox__vQes8)}>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__jIpXx
                    )}
                    component={Link}
                    href={"https://www.github.com/felsenlab/saccade-extraction"}
                    platform={"nextjs"}
                  >
                    {"Saccade-extraction"}
                  </PlasmicLink__>
                  <ExternalLinkSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___3GyFy)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToHttpsGithubComFelsenlabSaccadeExtraction"] =
                        true
                          ? (() => {
                              const actionArgs = {
                                destination:
                                  "https://github.com/felsenlab/saccade-extraction"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps[
                          "goToHttpsGithubComFelsenlabSaccadeExtraction"
                        ] != null &&
                        typeof $steps[
                          "goToHttpsGithubComFelsenlabSaccadeExtraction"
                        ] === "object" &&
                        typeof $steps[
                          "goToHttpsGithubComFelsenlabSaccadeExtraction"
                        ].then === "function"
                      ) {
                        $steps["goToHttpsGithubComFelsenlabSaccadeExtraction"] =
                          await $steps[
                            "goToHttpsGithubComFelsenlabSaccadeExtraction"
                          ];
                      }
                    }}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__omeBn
                  )}
                >
                  {
                    "This is a Python package that uses machine learning to extract eye movements from video recordings of the eye."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__pPVrC)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__wlxZs)}
                  displayHeight={"200px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"200px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/personal_website/images/blackflysCmountUsbPng.png",
                    fullWidth: 600,
                    fullHeight: 625,
                    aspectRatio: undefined
                  }}
                />

                <div className={classNames(projectcss.all, sty.freeBox__lFsX)}>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__w6ZoS
                    )}
                    component={Link}
                    href={"https://www.github.com/jbhunt/parallel-pyspin"}
                    platform={"nextjs"}
                  >
                    {"Parallel-pyspin"}
                  </PlasmicLink__>
                  <ExternalLinkSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__dWl5W)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToHttpsGithubComJbhuntParallelPyspin"] = true
                        ? (() => {
                            const actionArgs = {
                              destination:
                                "https://github.com/jbhunt/parallel-pyspin"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpsGithubComJbhuntParallelPyspin"] !=
                          null &&
                        typeof $steps[
                          "goToHttpsGithubComJbhuntParallelPyspin"
                        ] === "object" &&
                        typeof $steps["goToHttpsGithubComJbhuntParallelPyspin"]
                          .then === "function"
                      ) {
                        $steps["goToHttpsGithubComJbhuntParallelPyspin"] =
                          await $steps[
                            "goToHttpsGithubComJbhuntParallelPyspin"
                          ];
                      }
                    }}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r9Lro
                  )}
                >
                  {
                    "This is a Python package for parallelizing the operation of multiple FLIR Blackfly S USB3 cameras."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__aq5NO)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ojiFc)}
                  displayHeight={"200px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"200px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/personal_website/images/myphdlibProjectThumbnailPng2.png",
                    fullWidth: 886,
                    fullHeight: 886,
                    aspectRatio: undefined
                  }}
                />

                <div className={classNames(projectcss.all, sty.freeBox__klOg)}>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___0B5X
                    )}
                    component={Link}
                    href={
                      "https://www.https://www.github.com/jbhunt/myphdlib.app/"
                    }
                    platform={"nextjs"}
                  >
                    {"myphdlib"}
                  </PlasmicLink__>
                  <ExternalLinkSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___8Szkq)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToHttpsGithubComJbhuntMyphdlib"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: "https://github.com/jbhunt/myphdlib"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpsGithubComJbhuntMyphdlib"] != null &&
                        typeof $steps["goToHttpsGithubComJbhuntMyphdlib"] ===
                          "object" &&
                        typeof $steps["goToHttpsGithubComJbhuntMyphdlib"]
                          .then === "function"
                      ) {
                        $steps["goToHttpsGithubComJbhuntMyphdlib"] =
                          await $steps["goToHttpsGithubComJbhuntMyphdlib"];
                      }
                    }}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7GwkF
                  )}
                >
                  {
                    "This is a Python package that houses the data analysis software I developed during my PhD."
                  }
                </div>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__dtsCs)}
            >
              <div className={classNames(projectcss.all, sty.column___7Rcqw)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__te64S)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"200px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/personal_website/images/openpmad2ProjectThumbnailPng.png",
                    fullWidth: 886,
                    fullHeight: 886,
                    aspectRatio: undefined
                  }}
                />

                <div className={classNames(projectcss.all, sty.freeBox__sviMs)}>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__c8Ia8
                    )}
                    component={Link}
                    href={"https://www.github.com/jbhunt/openpmad2"}
                    platform={"nextjs"}
                  >
                    {"openpmad2"}
                  </PlasmicLink__>
                  <ExternalLinkSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__wgUvg)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToHttpsGithubComJbhuntOpenpmad2"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: "https://github.com/jbhunt/openpmad2"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpsGithubComJbhuntOpenpmad2"] != null &&
                        typeof $steps["goToHttpsGithubComJbhuntOpenpmad2"] ===
                          "object" &&
                        typeof $steps["goToHttpsGithubComJbhuntOpenpmad2"]
                          .then === "function"
                      ) {
                        $steps["goToHttpsGithubComJbhuntOpenpmad2"] =
                          await $steps["goToHttpsGithubComJbhuntOpenpmad2"];
                      }
                    }}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3DKbV
                  )}
                >
                  {
                    "A Python package for operating a miniature virtual reality system."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__dvoj)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__dqv4T)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"200px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/personal_website/images/mycarbotProjectThumbnailPng.png",
                    fullWidth: 886,
                    fullHeight: 886,
                    aspectRatio: undefined
                  }}
                />

                <div className={classNames(projectcss.all, sty.freeBox__ykl20)}>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___7L6UY
                    )}
                    component={Link}
                    href={"https://www.github.com/jbhunt/mycarbot"}
                    platform={"nextjs"}
                  >
                    {"mycarbot"}
                  </PlasmicLink__>
                  <ExternalLinkSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg__aHvW0)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToHttpsGithubComJbhuntMycarbot"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: "https://github.com/jbhunt/mycarbot"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpsGithubComJbhuntMycarbot"] != null &&
                        typeof $steps["goToHttpsGithubComJbhuntMycarbot"] ===
                          "object" &&
                        typeof $steps["goToHttpsGithubComJbhuntMycarbot"]
                          .then === "function"
                      ) {
                        $steps["goToHttpsGithubComJbhuntMycarbot"] =
                          await $steps["goToHttpsGithubComJbhuntMycarbot"];
                      }
                    }}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fOkfm
                  )}
                >
                  {
                    "A Python package that uses selenium to scrape data from used car websites."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__qtu20)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__mBDe)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"200px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/personal_website/images/unitLocalizerThumbnailPng2.png",
                    fullWidth: 886,
                    fullHeight: 886,
                    aspectRatio: undefined
                  }}
                />

                <div className={classNames(projectcss.all, sty.freeBox__ejNtX)}>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__c7Tlp
                    )}
                    component={Link}
                    href={"https://www.github.com/felsenlab/unit-localizer"}
                    platform={"nextjs"}
                  >
                    {"unit-localizer"}
                  </PlasmicLink__>
                  <ExternalLinkSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___0T7JV)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToHttpsWwwGithubComFelsenlabUnitLocalizer"] =
                        true
                          ? (() => {
                              const actionArgs = {
                                destination:
                                  "https://www.github.com/felsenlab/unit-localizer"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["goToHttpsWwwGithubComFelsenlabUnitLocalizer"] !=
                          null &&
                        typeof $steps[
                          "goToHttpsWwwGithubComFelsenlabUnitLocalizer"
                        ] === "object" &&
                        typeof $steps[
                          "goToHttpsWwwGithubComFelsenlabUnitLocalizer"
                        ].then === "function"
                      ) {
                        $steps["goToHttpsWwwGithubComFelsenlabUnitLocalizer"] =
                          await $steps[
                            "goToHttpsWwwGithubComFelsenlabUnitLocalizer"
                          ];
                      }
                    }}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___6ItfK
                  )}
                >
                  {
                    "A Python package for aligning single-unit data with the Allen Common Coordinate System"
                  }
                </div>
              </div>
            </Stack__>
          </section>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "menuStack"],
  menuStack: ["menuStack"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuStack: makeNodeComponent("menuStack"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
