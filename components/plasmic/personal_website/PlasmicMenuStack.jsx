/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jsfcAvrT2gX1xBNiQzA5u6
// Component: vfLBrX0fe4mB
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Popover from "../../Popover"; // plasmic-import: hlRZUksCEcpq/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: jsfcAvrT2gX1xBNiQzA5u6/projectcss
import sty from "./PlasmicMenuStack.module.css"; // plasmic-import: vfLBrX0fe4mB/css
import MenuSvgrepoComSvgIcon from "./icons/PlasmicIcon__MenuSvgrepoComSvg"; // plasmic-import: GOaTWnjAywsc/icon

createPlasmicElementProxy;

export const PlasmicMenuStack__VariantProps = new Array();

export const PlasmicMenuStack__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuStack__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "menuPopover.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Popover
        data-plasmic-name={"menuPopover"}
        data-plasmic-override={overrides.menuPopover}
        className={classNames("__wab_instance", sty.menuPopover)}
        content={
          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__dlp4S
              )}
              component={Link}
              href={`/new-page`}
              onClick={async event => {
                const $steps = {};
                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHomepage"] != null &&
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              platform={"nextjs"}
            >
              {"Home"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ot3E
              )}
              component={Link}
              href={`/new-page`}
              onClick={async event => {
                const $steps = {};
                $steps["goToAboutme"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToAboutme"] != null &&
                  typeof $steps["goToAboutme"] === "object" &&
                  typeof $steps["goToAboutme"].then === "function"
                ) {
                  $steps["goToAboutme"] = await $steps["goToAboutme"];
                }
              }}
              platform={"nextjs"}
            >
              {"About me"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__yzA9J
              )}
              component={Link}
              href={`/publications`}
              platform={"nextjs"}
              target={"_blank"}
            >
              {"Publications"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__lrDzp
              )}
              component={Link}
              href={`/datasets`}
              platform={"nextjs"}
            >
              {"Datasets"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__znKlw
              )}
              component={Link}
              href={
                "https://docs.google.com/document/d/1i4W582p-nxiLigh1zOkbUIDLbcQr4DtUq_V-nD2zG8c/export?format=pdf"
              }
              platform={"nextjs"}
              target={"_blank"}
            >
              {"Resume"}
            </PlasmicLink__>
          </Stack__>
        }
        onOpenChange={async (...eventArgs) => {
          generateStateOnChangeProp($state, ["menuPopover", "isOpen"]).apply(
            null,
            eventArgs
          );
          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        trigger={
          <MenuSvgrepoComSvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            onClick={async event => {
              const $steps = {};
              $steps["runElementAction"] = true
                ? (() => {
                    const actionArgs = {};
                    return (({ tplRef, action, args }) => {
                      return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runElementAction"] != null &&
                typeof $steps["runElementAction"] === "object" &&
                typeof $steps["runElementAction"].then === "function"
              ) {
                $steps["runElementAction"] = await $steps["runElementAction"];
              }
            }}
            role={"img"}
          />
        }
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Menu"}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "menuPopover", "svg", "freeBox", "text"],
  menuPopover: ["menuPopover", "svg", "freeBox"],
  svg: ["svg"],
  freeBox: ["freeBox"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenuStack__ArgProps,
          internalVariantPropNames: PlasmicMenuStack__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuStack__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuStack";
  } else {
    func.displayName = `PlasmicMenuStack.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuStack = Object.assign(
  // Top-level PlasmicMenuStack renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuPopover: makeNodeComponent("menuPopover"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicMenuStack
    internalVariantProps: PlasmicMenuStack__VariantProps,
    internalArgProps: PlasmicMenuStack__ArgProps
  }
);

export default PlasmicMenuStack;
/* prettier-ignore-end */
